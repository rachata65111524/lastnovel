import { useState, useEffect } from 'react';
import { useLocalSearchParams } from 'expo-router';
import { View, TextInput, Text, Button, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

const BASE_URL = 'http://10.0.2.2:5000';

export default function AddEpisodeScreen() {
  const { id: work_id } = useLocalSearchParams();
  const [title, setTitle] = useState('');
  const [type, setType] = useState<'novel' | 'comic'>('novel');
  const [content, setContent] = useState('');
  const [images, setImages] = useState<string[]>([]); // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û

  useEffect(() => {
    const fetchType = async () => {
      try {
        const res = await fetch(`${BASE_URL}/api/works/${work_id}`);
        if (!res.ok) throw new Error('Failed to fetch work type');

        const data = await res.json();
        setType(data.type);
      } catch (error) {
        console.error('Error fetching work type:', error);
        Alert.alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      }
    };

    fetchType();
  }, []);

  const onSubmit = async () => {
    try {
      const userJson = await AsyncStorage.getItem('user');
      const user = JSON.parse(userJson || '{}');

      const body = {
        work_id,
        title,
        user_id: user.id, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° user_id ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        content: type === 'novel' ? content : null,
        images: type === 'comic' ? images : null,
      };

      const res = await fetch(`${BASE_URL}/api/episodes`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      const data = await res.json();
      if (res.ok) {
        Alert.alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        setTitle('');
        setContent('');
        setImages([]);
      } else {
        Alert.alert(data.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }
    } catch (err) {
      Alert.alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
      console.error(err);
    }
  };

  return (
    <View style={{ padding: 20 }}>
      <TextInput
        placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ô"
        value={title}
        onChangeText={setTitle}
        style={{ borderBottomWidth: 1 }}
      />

      {type === 'novel' ? (
        <TextInput
          placeholder="‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢)"
          multiline
          numberOfLines={10}
          value={content}
          onChangeText={setContent}
          style={{ marginTop: 10, borderWidth: 1, padding: 10 }}
        />
      ) : (
        <Button
          title="üì∑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥)"
          onPress={() => Alert.alert('Coming soon')}
        />
      )}

      <Button title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≠‡∏ô" onPress={onSubmit} />
    </View>
  );
}
